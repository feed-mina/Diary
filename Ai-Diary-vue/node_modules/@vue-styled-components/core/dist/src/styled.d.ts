import { ExtractPropTypes, DefineSetupFnComponent, HTMLAttributes } from 'vue';
import { ExpressionType } from './utils';
import { DefaultTheme } from './providers/theme';
export type BaseContext<T> = T & {
    theme: DefaultTheme;
};
export type PropsDefinition<T> = {
    [K in keyof T]: T[K];
};
interface StyledComponent<T extends object> {
    <P>(styles: TemplateStringsArray, ...expressions: (ExpressionType<BaseContext<P & ExtractPropTypes<PropsDefinition<T>>>> | ExpressionType<BaseContext<P & ExtractPropTypes<PropsDefinition<T>>>>[])[]): DefineSetupFnComponent<{
        as?: string;
        props?: P;
    } & ExtractPropTypes<PropsDefinition<T>> & HTMLAttributes>;
    attrs<A = object>(attrs: A | ((props: ExtractPropTypes<PropsDefinition<T>>) => A)): StyledComponent<A & ExtractPropTypes<PropsDefinition<T>>>;
}
declare function baseStyled<T extends object>(target: string | InstanceType<any>, propsDefinition?: PropsDefinition<T>): StyledComponent<T>;
/** Append all the supported HTML elements to the styled properties */
declare const styled: typeof baseStyled & {
    object: StyledComponent<object>;
    a: StyledComponent<object>;
    abbr: StyledComponent<object>;
    address: StyledComponent<object>;
    area: StyledComponent<object>;
    article: StyledComponent<object>;
    aside: StyledComponent<object>;
    audio: StyledComponent<object>;
    b: StyledComponent<object>;
    base: StyledComponent<object>;
    bdi: StyledComponent<object>;
    bdo: StyledComponent<object>;
    big: StyledComponent<object>;
    blockquote: StyledComponent<object>;
    body: StyledComponent<object>;
    br: StyledComponent<object>;
    button: StyledComponent<object>;
    canvas: StyledComponent<object>;
    caption: StyledComponent<object>;
    cite: StyledComponent<object>;
    code: StyledComponent<object>;
    col: StyledComponent<object>;
    colgroup: StyledComponent<object>;
    data: StyledComponent<object>;
    datalist: StyledComponent<object>;
    dd: StyledComponent<object>;
    del: StyledComponent<object>;
    details: StyledComponent<object>;
    dfn: StyledComponent<object>;
    dialog: StyledComponent<object>;
    div: StyledComponent<object>;
    dl: StyledComponent<object>;
    dt: StyledComponent<object>;
    em: StyledComponent<object>;
    embed: StyledComponent<object>;
    fieldset: StyledComponent<object>;
    figcaption: StyledComponent<object>;
    figure: StyledComponent<object>;
    footer: StyledComponent<object>;
    form: StyledComponent<object>;
    h1: StyledComponent<object>;
    h2: StyledComponent<object>;
    h3: StyledComponent<object>;
    h4: StyledComponent<object>;
    h5: StyledComponent<object>;
    h6: StyledComponent<object>;
    head: StyledComponent<object>;
    header: StyledComponent<object>;
    hgroup: StyledComponent<object>;
    hr: StyledComponent<object>;
    html: StyledComponent<object>;
    i: StyledComponent<object>;
    iframe: StyledComponent<object>;
    img: StyledComponent<object>;
    input: StyledComponent<object>;
    ins: StyledComponent<object>;
    kbd: StyledComponent<object>;
    keygen: StyledComponent<object>;
    label: StyledComponent<object>;
    legend: StyledComponent<object>;
    li: StyledComponent<object>;
    link: StyledComponent<object>;
    main: StyledComponent<object>;
    map: StyledComponent<object>;
    mark: StyledComponent<object>;
    menu: StyledComponent<object>;
    menuitem: StyledComponent<object>;
    meta: StyledComponent<object>;
    meter: StyledComponent<object>;
    nav: StyledComponent<object>;
    noscript: StyledComponent<object>;
    ol: StyledComponent<object>;
    optgroup: StyledComponent<object>;
    option: StyledComponent<object>;
    output: StyledComponent<object>;
    p: StyledComponent<object>;
    param: StyledComponent<object>;
    picture: StyledComponent<object>;
    pre: StyledComponent<object>;
    progress: StyledComponent<object>;
    q: StyledComponent<object>;
    rp: StyledComponent<object>;
    rt: StyledComponent<object>;
    ruby: StyledComponent<object>;
    s: StyledComponent<object>;
    samp: StyledComponent<object>;
    script: StyledComponent<object>;
    section: StyledComponent<object>;
    select: StyledComponent<object>;
    small: StyledComponent<object>;
    source: StyledComponent<object>;
    span: StyledComponent<object>;
    strong: StyledComponent<object>;
    style: StyledComponent<object>;
    sub: StyledComponent<object>;
    summary: StyledComponent<object>;
    sup: StyledComponent<object>;
    table: StyledComponent<object>;
    tbody: StyledComponent<object>;
    td: StyledComponent<object>;
    textarea: StyledComponent<object>;
    tfoot: StyledComponent<object>;
    th: StyledComponent<object>;
    thead: StyledComponent<object>;
    time: StyledComponent<object>;
    title: StyledComponent<object>;
    tr: StyledComponent<object>;
    track: StyledComponent<object>;
    u: StyledComponent<object>;
    ul: StyledComponent<object>;
    var: StyledComponent<object>;
    video: StyledComponent<object>;
    wbr: StyledComponent<object>;
    circle: StyledComponent<object>;
    clipPath: StyledComponent<object>;
    defs: StyledComponent<object>;
    ellipse: StyledComponent<object>;
    g: StyledComponent<object>;
    image: StyledComponent<object>;
    line: StyledComponent<object>;
    linearGradient: StyledComponent<object>;
    mask: StyledComponent<object>;
    path: StyledComponent<object>;
    pattern: StyledComponent<object>;
    polygon: StyledComponent<object>;
    polyline: StyledComponent<object>;
    radialGradient: StyledComponent<object>;
    rect: StyledComponent<object>;
    stop: StyledComponent<object>;
    svg: StyledComponent<object>;
    text: StyledComponent<object>;
    tspan: StyledComponent<object>;
};
export { styled, styled as default };
