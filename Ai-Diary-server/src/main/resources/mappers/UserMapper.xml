<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.domain.demo_backend.mapper.UserMapper">
    <!--일반 회원가입은 socailType을 'N'으로-->

    <resultMap id="userResultMap" type="com.domain.demo_backend.user.domain.User">
        <id property="userSqno" column="user_sqno"/>
        <result property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="hashedPassword" column="hashed_password"/>
        <result property="role" column="role"/>
        <result property="username" column="username"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="repassword" column="repassword"/>
        <result property="nickname" column="nickname"/>
        <result property="delYn" column="del_yn"/>
        <result property="verifyYn" column="verify_yn"/>
        <result property="socialType" column="social_type"/>
        <result property="verificationCode" column="verification_code"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="findByUserEmail"  parameterType="string" resultType="com.domain.demo_backend.user.domain.User">
        SELECT
            user_sqno AS userSqno,
            user_id  AS userId,
            password,
            hashed_password AS hashedPassword,
            role,
            username,
            phone,
            email,
            nickname,
            delYn,
            verifyYn,
            socialType,
            verification_code AS verificationCode,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM users
        WHERE email = #{email}
    </select>

    <insert id="insertUser" parameterType="com.domain.demo_backend.user.domain.User"
            useGeneratedKeys="true" keyProperty="userSqno">
        INSERT INTO users (user_id, password, hashed_password, email, phone, nickname, role, username, created_at,
                           updated_at, socialType)
        VALUES (#{userId}, #{password}, #{hashedPassword}, #{email}, #{phone},
                IFNULL(#{nickname}, #{userId}), #{role}, #{username}, #{createdAt}, #{updatedAt}, #{socialType});
    </insert>

    <update id="updateUpdatedAt" parameterType="string">
        UPDATE users
        SET updated_at = NOW()
        WHERE email = #{email}
    </update>
    <update id="updateUserSocialType" parameterType="com.domain.demo_backend.user.domain.User">
        UPDATE users
        SET socialType = 'K', password = #{password}, hashed_password = #{hashedPassword}, updated_at = NOW()
        WHERE email = #{email};
    </update>

    <select id="findByUserId" resultType="com.domain.demo_backend.user.domain.User">
        SELECT
            user_sqno AS userSqno,
            user_id  AS userId,
            password,
            hashed_password AS hashedPassword,
            role,
            username,
            phone,
            email,
            nickname,
            delYn,
            verifyYn,
            socialType,
            verification_code AS verificationCode,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM users
        WHERE user_id = #{userId}
    </select>
    <select id="findByUserPhone" parameterType="string" resultType="com.domain.demo_backend.user.domain.User">
        SELECT
            user_sqno AS userSqno,
            user_id  AS userId,
            password,
            hashed_password AS hashedPassword,
            role,
            username,
            phone,
            email,
            nickname,
            delYn,
            verifyYn,
            socialType,
            verification_code AS verificationCode,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM users
        WHERE phone = #{phone}
    </select>


    <select id="findByUsername" parameterType="string" resultType="com.domain.demo_backend.user.domain.User">
        SELECT username,
               password,
               user_sqno AS userSqno
        FROM users
        WHERE username = #{username}
    </select>

    <!-- 이메일 인증 성공하면 verifyYn을 Y로 바꾸기 -->
    <update id="updateVerifyYn">
        UPDATE users
        SET verifyYn = 'Y'
        WHERE email = #{email}
    </update>

    <update id="updateVerificationCode">
        UPDATE users
        SET verification_code = #{verificationCode},
            verification_expired_at = DATE_ADD(NOW(), INTERVAL 3 MINUTE)
        WHERE email = #{email}
    </update>

    <select id="findCodeByEmail" resultType="String">
        SELECT verifyYn
        FROM users
        WHERE email = #{email}
    </select>

    <select id="findIndexByEmail" resultType="BigInteger">
        SELECT user_sqno
        FROM users
        WHERE email = #{email}
    </select>


    <update id="nonMember" parameterType="com.domain.demo_backend.user.domain.User">
        UPDATE users
        SET delYn      = 'Y',
            updated_at = NOW(),
            withdraw_at = NOW()
        WHERE email = #{email}
    </update>
    <update id="editPassword" parameterType="com.domain.demo_backend.user.domain.User">
        UPDATE users
        SET password = #{password}, updated_at = NOW(), hashed_password = #{hashedPassword}
        WHERE email = #{email}
    </update>

    <select id="findWidthdrawUser"  parameterType="string" resultType="com.domain.demo_backend.user.domain.User">
        SELECT
            user_sqno AS userSqno,
            user_id  AS userId,
            password,
            hashed_password AS hashedPassword,
            role,
            username,
            phone,
            email,
            nickname,
            delYn,
            verifyYn,
            socialType,
            verification_code AS verificationCode,
            created_at AS createdAt,
            updated_at AS updatedAt
        FROM users
        WHERE email = #{email}
          AND delYn = 'Y'
          AND withdraw_at > CONVERT_TZ(DATE_SUB(UTC_TIMESTAMP(), INTERVAL 7 DAY), '+00:00', '+09:00')
    </select>

</mapper>